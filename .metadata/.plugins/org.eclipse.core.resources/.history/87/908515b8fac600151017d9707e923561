'''
Created on Jan 24, 2016

@author: Liang Li

input: schedules of 6 areas
output: valid schedules of 6 areas

criteria 1. each schedule has up to 3 contents at one time
criteria 2. for any one of the schedules, no duplicated contents at the same time

'''


class schedule():
    '''
    each schedule request input record may be:
    schedule_request = id, area_NO, start_time, end_time, contentID_score_dict, location_value_dict
    
    location_schedule_dict = {'area1': {'t1': ['c1', 'c2', 'c3'], 't20': ['c4', 'c5', '']}, 
                              'area2': {'t1': ['c7', 'c8', 'c9'], 't20': ['c10', '', 'c11']},
                              #...
                              'area6': {'t1': ['c2', 'c8', 'c3'], 't20': ['c1', '', 'c5']}
                              }
    '''
    location_schedule_dict = {}
    
    
    def check_location_ID(self, area_schedule):
        # insert location ID if location ID is not in location_schedule_dict
        if area_schedule.locationID not in self.location_schedule_dict:
            self.location_schedule_dict[area_schedule.locationID] = {}
    
    
    def check_size(self, area_schedule):
        time_content_dict = self.location_schedule_dict[area_schedule.locationID]
        # traverse all 
        for t, c in time_content_dict.items():
            if area_schedule.start_time <= t <= area_schedule.end_time:
                if len(c) > 3:
                    return False
        return True
                
        
    def check_conflict(self, area_schedule):
        time_content_dict = self.location_schedule_dict[area_schedule.locationID]
        for t, c in time_content_dict.items():
            if area_schedule.start_time <= t <= area_schedule.end_time:
                if area_schedule.contentID in c:
                    return False
        return True
    
        
    def add_to_dict(self, area_schedule):
        time_content_dict = self.location_schedule_dict[area_schedule.locationID]
        for t in range(area_schedule.start_time, area_schedule.end_time):
            contentID_list = []
            if t not in time_content_dict:
                contentID_list.append(area_schedule.contentID)
                time_content_dict[t] = contentID_list
            else:
                time_content_dict[t].append(area_schedule.contentID)
        self.location_schedule_dict[area_schedule.locationID] = time_content_dict
                
        
        
    def schedule_ad(self, schedule_request_in, schedule_request_out, schedule_request_rej):
        while True:
            try: 
                # read each area schedule
                area_schedule = schedule_request_in.Next()
                # check if location ID is in dictionary
                self.check_location_ID(area_schedule)
                # check if contents are less than 3 at the same time
                if self.check_size(area_schedule):
                    # check if there are duplicated contents at the same time 
                    if self.check_duplicate_content(area_schedule):
                        schedule_request_out.write_schedule_request(area_schedule)
                        self.add_to_dict(area_schedule)
                        continue
                schedule_request_out.schedule_request_reject(area_schedule)
                        
            except StopIteration:
                break 
        
        
    